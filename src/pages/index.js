import { PokeballIconSmall } from '@/assets/pokeball';
import ModalCapturesPokemonData from '@/components/ModalCapturedPokemonData';
import ModalPokemonData from '@/components/ModalPokemonData';
import PokemonCard from '@/components/PokemonCard';
import {
  Box,
  Button,
  Container,
  Flex,
  SimpleGrid,
  Stack,
  Text,
  useDisclosure,
} from '@chakra-ui/react';
import axios from 'axios';
import { motion } from 'framer-motion';
import { Inter } from 'next/font/google';
import Head from 'next/head';
import { useEffect, useState } from 'react';
const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const pokemonDataModal = useDisclosure();
  const capturedPokemonModal = useDisclosure();
  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [catched, setCatched] = useState(false);
  const [pokemonsCatch, setPokemonsCatch] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [offset, setOffset] = useState(20);
  const [currentPage, setCurrentPage] = useState(
    'https://pokeapi.co/api/v2/pokemon/?limit=20&offset=0'
  );

  useEffect(() => {
    setIsLoading(true);
    axios.get(currentPage).then(async ({ data }) => {
      const promises = data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon((prev) => [...prev, ...fetchedPokemon]);
      setIsLoading(false);
    });
  }, [currentPage]);

  function handleNextPage() {
    setOffset((prevOffset) => prevOffset + 20);
    setCurrentPage(
      `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${offset}`
    );
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    const foundPokemon = pokemonsCatch.find((poke) => poke.id === pokemon.id);
    setCatched(foundPokemon ? true : false);
    pokemonDataModal.onOpen();
  }

  async function handleViewCapturedPokemon() {
    capturedPokemonModal.onOpen();
  }

  function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  const getPokes = async () => {
    try {
      const res = await axios.get(`/api/catched`);
      if (res.data) {
        const pokemonsData = [];
        for (const pokemon of res.data) {
          try {
            const response = await axios.get(
              `https://pokeapi.co/api/v2/pokemon/${pokemon.id}`
            );
            pokemonsData.push(response.data);
          } catch (error) {
            console.error(`Error al obtener datos de ${pokemon.name}:`, error);
          }
        }
        setPokemonsCatch(pokemonsData);
      }
    } catch (error) {
      console.error('Error al obtener datos de los Pokémon:', error);
    }
  };

  useEffect(() => {
    getPokes();
  }, []);

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex alignItems="center" justifyContent="center">
        <PokeballIconSmall />
        <Text fontSize="6xl">Pokédex</Text>
      </Flex>
      <Flex alignItems="center" justifyContent="center">
        <Button
          isDisabled={pokemonsCatch.length === 0}
          onClick={handleViewCapturedPokemon}
          leftIcon={<PokeballIconSmall />}
        >
          View Captured Pokémon
        </Button>
      </Flex>
      <Flex alignItems="center" minH="100vh" justifyContent="center">
        <Container maxW="container.lg">
          <Stack p="5" alignItems="center" spacing="5">
            <SimpleGrid spacing="5" columns={{ base: 1, md: 5 }}>
              {pokemon.map((pokemon) => (
                <Box
                  key={pokemon.id}
                  as="button"
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <motion.div
                    whileHover={{ scale: 1.2 }}
                    whileTap={{ scale: 0.8 }}
                  >
                    <PokemonCard pokemon={pokemon} />
                  </motion.div>
                </Box>
              ))}
            </SimpleGrid>

            <Button
              isLoading={isLoading}
              onClick={() => handleNextPage()}
              leftIcon={<PokeballIconSmall />}
            >
              Load more
            </Button>
          </Stack>
        </Container>
      </Flex>
      <ModalPokemonData
        selectedPokemon={selectedPokemon}
        getPokes={getPokes}
        catched={catched}
        pokemonDataModal={pokemonDataModal}
      />
      <ModalCapturesPokemonData
        capturedPokemonModal={capturedPokemonModal}
        pokemonsCatch={pokemonsCatch}
        getPokes={getPokes}
      />
      <Box
        position="fixed"
        bottom="4"
        right="4"
        zIndex="999"
        onClick={scrollToTop}
      >
        <Button
          colorScheme="blue"
          size="lg"
          style={{ borderRadius: '70%', fontSize: '24px', fontWeight: 'bold' }}
        >
          ↑
        </Button>
      </Box>
    </>
  );
}
